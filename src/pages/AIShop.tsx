import { useState, useEffect } from 'react';
import { Send, ShoppingCart, Bot, User } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Product } from '@/lib/types';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useCart } from '@/hooks/useCart';

interface ChatMessage {
  id: string;
  content: string;
  isBot: boolean;
  timestamp: Date;
}

export default function AIShop() {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      content: 'Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω AI c·ªßa b·∫°n t·∫°i Mini Shop. B·∫°n c·∫ßn t√¨m s·∫£n ph·∫©m n√†o h√¥m nay? üòä',
      isBot: true,
      timestamp: new Date()
    },
    {
      id: '2',
      content: 'M√¨nh ƒëang t√¨m gi√†y ch·∫°y b·ªô ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.',
      isBot: false,
      timestamp: new Date()
    },
    {
      id: '3',
      content: 'N·∫øu b·∫°n m·ªõi b·∫Øt ƒë·∫ßu, m√¨nh g·ª£i √Ω ƒë√¥i gi√†y Nike Air Zoom Pegasus, gi√° ch·ªâ 2.490.000ƒë, thi·∫øt k·∫ø nh·∫π, √™m √°i, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. B·∫°n mu·ªën xem th√™m chi ti·∫øt hay th√™m v√†o gi·ªè h√†ng ngay kh√¥ng?',
      isBot: true,
      timestamp: new Date()
    }
  ]);
  const [newMessage, setNewMessage] = useState('');
  const { toast } = useToast();
  const { addToCart } = useCart();

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .gt('stock', 0)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setProducts(data || []);
    } catch (error) {
      toast({
        title: 'L·ªói',
        description: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSendMessage = () => {
    if (!newMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: newMessage,
      isBot: false,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setNewMessage('');

    // Simulate bot response
    setTimeout(() => {
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: 'C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! M√¨nh ƒëang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n...',
        isBot: true,
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  const handleAddToCart = (product: Product) => {
    addToCart(product);
    toast({
      title: 'ƒê√£ th√™m v√†o gi·ªè h√†ng',
      description: `${product.name} ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng c·ªßa b·∫°n`
    });
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  return (
    <div className="h-screen flex bg-background">
      {/* Left Column - Sticky AI Chat Interface */}
      <div className="w-1/3 border-r border-border flex flex-col bg-card">
        {/* Chat Header */}
        <div className="p-4 border-b border-border bg-primary/5">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
              <Bot className="w-5 h-5 text-primary" />
            </div>
            <div>
              <h2 className="font-semibold text-lg">AI Tr·ª£ L√Ω</h2>
              <p className="text-sm text-muted-foreground">Mini Shop Assistant</p>
            </div>
          </div>
        </div>

        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {chatMessages.map((message) => (
            <div
              key={message.id}
              className={`flex gap-3 ${message.isBot ? 'justify-start' : 'justify-end'}`}
            >
              {message.isBot && (
                <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center shrink-0">
                  <Bot className="w-4 h-4 text-primary" />
                </div>
              )}
              <div
                className={`max-w-[80%] p-3 rounded-lg ${
                  message.isBot
                    ? 'bg-muted text-foreground'
                    : 'bg-primary text-primary-foreground'
                }`}
              >
                <p className="text-sm leading-relaxed">{message.content}</p>
                <p className="text-xs opacity-70 mt-1">
                  {message.timestamp.toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
              </div>
              {!message.isBot && (
                <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center shrink-0">
                  <User className="w-4 h-4 text-primary-foreground" />
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Chat Input - Fixed at bottom */}
        <div className="p-4 border-t border-border bg-background">
          <div className="flex gap-2">
            <Input
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              className="flex-1"
            />
            <Button onClick={handleSendMessage} size="icon">
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Right Column - Product Grid */}
      <div className="flex-1 overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
          <div className="text-center space-y-2">
            <h1 className="text-3xl font-bold">Mini Shop AI</h1>
            <p className="text-muted-foreground">Kh√°m ph√° s·∫£n ph·∫©m tuy·ªát v·ªùi v·ªõi gi√° c·∫£ h·∫•p d·∫´n</p>
          </div>
        </div>

        {/* Product Grid */}
        <div className="p-6">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <div className="text-lg text-muted-foreground">ƒêang t·∫£i s·∫£n ph·∫©m...</div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {products.map((product) => (
                <Card 
                  key={product.id} 
                  className="group overflow-hidden hover:shadow-lg transition-all duration-300 hover:scale-[1.02] cursor-pointer"
                >
                  <div className="aspect-square bg-muted flex items-center justify-center overflow-hidden">
                    {product.images && product.images.length > 0 ? (
                      <img
                        src={product.images[0]}
                        alt={product.name}
                        className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                    ) : (
                      <div className="text-muted-foreground">Kh√¥ng c√≥ h√¨nh ·∫£nh</div>
                    )}
                  </div>
                  
                  <CardContent className="p-4">
                    <div className="space-y-3">
                      <div className="space-y-1">
                        <h3 className="font-semibold text-sm line-clamp-2 leading-tight">
                          {product.name}
                        </h3>
                        {product.category && (
                          <Badge variant="secondary" className="text-xs">
                            {product.category}
                          </Badge>
                        )}
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <span className="text-lg font-bold text-primary">
                          {formatPrice(product.price)}
                        </span>
                        <div className="flex gap-1">
                          <Badge variant="outline" className="text-xs">
                            Ch√≠nh H√£ng
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            Free Ship
                          </Badge>
                        </div>
                      </div>
                      
                      <div className="text-sm text-muted-foreground">
                        C√≤n {product.stock} s·∫£n ph·∫©m
                      </div>
                      
                      <Button
                        size="sm"
                        className="w-full"
                        onClick={() => handleAddToCart(product)}
                      >
                        <ShoppingCart className="w-4 h-4 mr-2" />
                        Th√™m v√†o gi·ªè
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {products.length === 0 && !loading && (
            <div className="text-center py-12">
              <p className="text-lg text-muted-foreground">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}