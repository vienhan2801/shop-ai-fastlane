import { useState } from 'react';
import { Send, Bot, User } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

interface ChatMessage {
  id: string;
  content: string;
  isBot: boolean;
  timestamp: Date;
}

const initialMessages: ChatMessage[] = [
  {
    id: '1',
    content: 'Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω AI c·ªßa b·∫°n t·∫°i Mini Shop. B·∫°n c·∫ßn t√¨m s·∫£n ph·∫©m n√†o h√¥m nay? üòä',
    isBot: true,
    timestamp: new Date()
  },
  {
    id: '2',
    content: 'M√¨nh ƒëang t√¨m gi√†y ch·∫°y b·ªô ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.',
    isBot: false,
    timestamp: new Date()
  },
  {
    id: '3',
    content: 'N·∫øu b·∫°n m·ªõi b·∫Øt ƒë·∫ßu, m√¨nh g·ª£i √Ω ƒë√¥i gi√†y Nike Air Zoom Pegasus, gi√° ch·ªâ 2.490.000ƒë, thi·∫øt k·∫ø nh·∫π, √™m √°i, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. B·∫°n mu·ªën xem th√™m chi ti·∫øt hay th√™m v√†o gi·ªè h√†ng ngay kh√¥ng?',
    isBot: true,
    timestamp: new Date()
  }
];

export function ChatInterface() {
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>(initialMessages);
  const [newMessage, setNewMessage] = useState('');

  const handleSendMessage = () => {
    if (!newMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: newMessage,
      isBot: false,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setNewMessage('');

    // Simulate bot response
    setTimeout(() => {
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: 'C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! M√¨nh ƒëang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n...',
        isBot: true,
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  return (
    <div className="w-full h-full border-r border-border flex flex-col bg-card">
      {/* Chat Header */}
      <div className="p-4 border-b border-border bg-primary/5">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
            <Bot className="w-5 h-5 text-primary" />
          </div>
          <div>
            <h2 className="font-semibold text-lg">AI Tr·ª£ L√Ω</h2>
            <p className="text-sm text-muted-foreground">Mini Shop Assistant</p>
          </div>
        </div>
      </div>

      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {chatMessages.map((message) => (
          <div
            key={message.id}
            className={`flex gap-3 ${message.isBot ? 'justify-start' : 'justify-end'}`}
          >
            {message.isBot && (
              <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center shrink-0">
                <Bot className="w-4 h-4 text-primary" />
              </div>
            )}
            <div
              className={`max-w-[80%] p-3 rounded-lg ${
                message.isBot
                  ? 'bg-muted text-foreground'
                  : 'bg-primary text-primary-foreground'
              }`}
            >
              <p className="text-sm leading-relaxed">{message.content}</p>
              <p className="text-xs opacity-70 mt-1">
                {message.timestamp.toLocaleTimeString('vi-VN', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </p>
            </div>
            {!message.isBot && (
              <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center shrink-0">
                <User className="w-4 h-4 text-primary-foreground" />
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Chat Input - Fixed at bottom */}
      <div className="p-4 border-t border-border bg-background">
        <div className="flex gap-2">
          <Input
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            className="flex-1"
          />
          <Button onClick={handleSendMessage} size="icon">
            <Send className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}